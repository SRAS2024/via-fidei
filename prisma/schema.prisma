generator client {
  provider = "prisma-client-js" 
}
datasource db { 
  provider = "postgresql" 
  url = env("DATABASE_URL") 
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prayers     FavoritePrayer[]
  saints      FavoriteSaint[]
  ourladies   FavoriteOurLady[]
  journal     Journal[]
  milestones  Milestone[]
  goals       Goal[]
  profilePic  String?
}

model Prayer {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  language  String
  createdAt DateTime @default(now())
  favoritedBy FavoritePrayer[]
}

model Saint {
  id        String   @id @default(cuid())
  name      String
  feastDate DateTime?
  patronage String?
  bio       String?
  imageUrl  String?
  favoritedBy FavoriteSaint[]
}

model OurLady {
  id        String   @id @default(cuid())
  title     String
  location  String?
  feastDate DateTime?
  apparition String?
  imageUrl  String?
  favoritedBy FavoriteOurLady[]
}

model Guide {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  createdAt DateTime @default(now())
}

model Parish {
  id         String   @id @default(cuid())
  name       String
  address    String?
  city       String?
  region     String?
  postalCode String?
  country    String?
  phone      String?
  email      String?
  website    String?
  diocese    String?
  ociaUrl    String?
  hoursJson  Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([city])
  @@index([region])
  @@index([country])
}

model Journal {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  favorite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Milestone {
  id          String          @id @default(cuid())
  userId      String
  type        MilestoneType
  title       String
  description String?
  iconKey     String?
  status      MilestoneStatus @default(IN_PROGRESS)
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, type, title])
  @@index([userId, type, status])
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  status      GoalStatus @default(IN_PROGRESS)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, status])
}

model FavoritePrayer {
  id       String @id @default(cuid())
  userId   String
  prayerId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prayer Prayer @relation(fields: [prayerId], references: [id], onDelete: Cascade)
  @@unique([userId, prayerId])
}

model FavoriteSaint {
  id      String @id @default(cuid())
  userId  String
  saintId String
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  saint Saint @relation(fields: [saintId], references: [id], onDelete: Cascade)
  @@unique([userId, saintId])
}

model FavoriteOurLady {
  id        String @id @default(cuid())
  userId    String
  ourLadyId String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ourLady OurLady @relation(fields: [ourLadyId], references: [id], onDelete: Cascade)
  @@unique([userId, ourLadyId])
}

enum MilestoneType {
  SACRAMENT
  CONSECRATION
  PERSONAL
}

enum MilestoneStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELED
}
